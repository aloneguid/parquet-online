@page "/"
@using Humanizer;
@using Parquet;
@using Parquet.Rows;
@using Parquet.Schema;
@using ParquetViewer.WebAdapters;
@using System.Text;
@using Toolbelt.Blazor.FileDropZone

<PageTitle>Viewer</PageTitle>

@if(isLoading)
{
    <RadzenCard>
        <RadzenText TextStyle="TextStyle.Subtitle2">@loadStatus</RadzenText>
        <RadzenProgressBar Max="100" @bind-Value=@loadValue/>
    </RadzenCard>
}

@if (table == null)
{
<p>
    <FileDropZone class="drop-zone">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Choose or drag a .parquet file</RadzenText>
            <InputFile OnChange="@LoadFile"/>
        </RadzenCard>
    </FileDropZone>
</p>
}
else
{
    if(file != null)
    {
        
 <p>
    <RadzenText TextStyle="TextStyle.DisplayH6" Style="display: inline;">@file.Name</RadzenText>
    @file.Size.Bytes()
</p>
    }

<p>
    <DataView Table="@table"/>
</p>

<p>
    <RadzenButton Text="clear" Click=@Clear ButtonStyle="ButtonStyle.Secondary"/>
</p>
}

@if(error != null)
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}

@code {
    string? error = null;
    Table? table = null;
    bool isLoading = false;
    string? loadStatus = null;
    double loadValue = 0;
    IBrowserFile? file = null;

    void Clear(MouseEventArgs args)
    {
        file = null;
        table = null;
    }

    async Task LoadFile(InputFileChangeEventArgs e) {
        isLoading = true;
        try
        {
            file = e.File;
            using (var bs = new BlazorFileStream(file, long.MaxValue))
            {
                using (var reader = await ParquetReader.CreateAsync(bs, new ParquetOptions {TreatByteArrayAsString = true}))
                {
                    var tmpTable = await reader.ReadAsTableAsync(async (int perc, string message) =>
                    {
                        loadValue = perc;
                        loadStatus = message;
                        StateHasChanged();
                    });
                    table = tmpTable;
                    StateHasChanged();
                }
            }

            error = null;
        }
        catch(Exception ex)
        {
            table = null;
            file = null;
            error = ex.ToString();
        }
        finally
        {
            isLoading = false;
        }
    }
}