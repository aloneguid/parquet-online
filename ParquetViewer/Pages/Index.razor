@page "/"
@using Humanizer;
@using Parquet;
@using Parquet.Rows;
@using Parquet.Schema;
@using ParquetViewer.WebAdapters;
@using System.Text;
@using Toolbelt.Blazor.FileDropZone

<PageTitle>Viewer</PageTitle>

@if(isLoading)
{
    <RadzenCard>
        <RadzenText TextStyle="TextStyle.Subtitle2">@loadStatus</RadzenText>
        <RadzenProgressBar Max="100" @bind-Value=@loadValue/>
    </RadzenCard>
}

@if(GFile.HasFile)
{
 <p>
    <RadzenText TextStyle="TextStyle.DisplayH6" Style="display: inline;">@GFile.FileName</RadzenText>
    @GFile.FileSize.Value.Bytes()
</p>
}

<p>
    <DataView Table="@GFile.Table"/>
</p>

<p>
    @if(!GFile.HasFile)
    {
        <RadzenCard>
            <RadzenText>This application opens .parquet files for viewing and works completely on client side. Click the button below to navigate and open a file.</RadzenText>
        </RadzenCard>
        <br />
    }

    <RadzenCard>
        <FileOpener OnFileOpened=@OnFileOpened />
    </RadzenCard>
</p>

@if(error != null)
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}

@code {
    string? error = null;

    bool isLoading = false;
    string? loadStatus = null;
    double loadValue = 0;

    async Task OnFileOpened(MouseEventArgs args)
    {
        //await GFile.Clear();
        //StateHasChanged();
        Console.WriteLine("opened event");

        isLoading = true;
        loadValue = 0;
        loadStatus = "checking file...";
        try
        {
            error = null;

            using (var reader = await ParquetReader.CreateAsync(GFile.RandomAccessStream!, new ParquetOptions {TreatByteArrayAsString = true}))
            {
                loadStatus = "loading schema...";
                GFile.ManagedSchema = reader.Schema;
                GFile.ThriftMetadata = reader.ThriftMetadata;

                var tmpTable = await reader.ReadAsTableAsync(async (int perc, string message) =>
                {
                    loadValue = perc;
                    loadStatus = message;
                    StateHasChanged();
                });
                GFile.Table = tmpTable;
                loadStatus = "rendering...";
                StateHasChanged();
            }

        }
        catch(Exception ex)
        {
            error = ex.ToString();
        }
        finally
        {
            isLoading = false;
        }
    }
}