@implements IDisposable
@using KristofferStrube.Blazor.FileSystem;
@using KristofferStrube.Blazor.FileSystemAccess;
@using Parquet;
@using ParquetViewer.WebAdapters;
@inject IFileSystemAccessService FileSystemAccessService;

@if (!GFile.HasFile || isLoading)
{
    <div class="h-100 d-flex d-justify-content-center align-items-center">
        <div class="container w-25">

            @if (isLoading)
            {
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">@status</RadzenText>
                    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                </RadzenCard>
            }
            else
            {
                <div>
                    <RadzenButton Text="open from local disk" Click=@OpenParquetFile/>
                    <div class="m-2 mt-3 align-content-center">
                        <iframe src="https://ghbtns.com/github-btn.html?user=aloneguid&repo=parquet-online&type=star&count=true"
                        frameborder="0" scrolling="0" width="80" height="20" title="GitHub"></iframe>
                    </div>
                </div>
            }
        </div>
    </div>
}

@if (error != null)
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}

@code {
    private bool _initialised = false;
    bool isLoading = false;
    string status = "";
    string? error = null;

    //[Parameter]
    //public EventCallback<MouseEventArgs> OnFileOpened { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("FileOpener+");
        GFile.OnFileLoaded += FileLoaded;
    }

    public void Dispose()
    {
        Console.WriteLine("FileOpener-");
        GFile.OnFileLoaded -= FileLoaded;
    }

    public void FileLoaded(string? file)
    {
        StateHasChanged();
    }

    public async Task OpenParquetFile(MouseEventArgs args)
    {
        FileSystemFileHandle? fileHandle = null;
        error = null;
        isLoading = true;
        status = "accessing local disc...";
        StateHasChanged();
        try
        {
            var options = new OpenFilePickerOptionsStartInWellKnownDirectory
            {
                Types = new FilePickerAcceptType[]
                {
                    new FilePickerAcceptType
                    {
                        Description = "Apache Parquet Files",
                        Accept = new()
                        {
                            { "parquet/*", new string[] { ".parquet" } }
                        }
                    },
                },
                Multiple = false
            };
            FileSystemFileHandle[]? fileHandles = await FileSystemAccessService.ShowOpenFilePickerAsync(options);
            fileHandle = fileHandles.Single();
        }
        catch(JSException ex)
        {
            error = ex.ToString();
        }
        finally
        {
            if(fileHandle != null)
            {
                status = "reading metadata...";
                StateHasChanged();
                KristofferStrube.Blazor.FileAPI.File file = await fileHandle.GetFileAsync();
                await GFile.InitFile(file);
                StateHasChanged();
                //await OnFileOpened.InvokeAsync(null);
            }
            isLoading = false;
            StateHasChanged();
        }
    }
}
