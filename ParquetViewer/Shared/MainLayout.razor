@inherits LayoutComponentBase
@using Parquet;

<RadzenLayout class="rz-shadow-3">
    <!-- see https://github.com/radzenhq/radzen-blazor/blob/master/RadzenBlazorDemos/Shared/MainLayout.razor -->
    <RadzenHeader>
        <div class="row justify-content-start align-items-center">
            <div class="col-5 d-flex align-items-center">
                <RadzenImage Path="icon-192.png" width="30" class="m-2"/>&nbsp;
                <RadzenText Style="overflow:hidden; white-space: nowrap; text-overflow: ellipsis;" class="m-2" TextStyle="TextStyle.DisplayH6">
                    Apache Parquet Viewer
                </RadzenText>
                <!--
                @if (GFile.HasFile)
                {
                    <RadzenButton Text="clear" Size="ButtonSize.Small" Click=@ClearAsync/>
                }
                -->
            </div>
            <div class="col-7 d-flex align-items-center justify-content-end">
                <RadzenText TextStyle="TextStyle.Subtitle2" class="m-1 me-3">
                    <RadzenLink Path="https://github.com/aloneguid/parquet-dotnet">Parquet.Net</RadzenLink>
                    <RadzenLink Path="@parquetNetReleasePageUrl">@Globals.Version</RadzenLink>
                </RadzenText>
                <!-- Place this tag where you want the button to render. -->
                <div class="m-2 mt-3">
                    <iframe src="https://ghbtns.com/github-btn.html?user=aloneguid&repo=parquet-online&type=star&count=true"
                        frameborder="0" scrolling="0" width="80" height="20" title="GitHub"></iframe>
                </div>
            </div>

        </div>
    </RadzenHeader>
    <RadzenBody class="m-0 p-0">
        @Body
    </RadzenBody>
</RadzenLayout>

@code {
    bool sidebarExpanded = false;
    string parquetNetReleasePageUrl = $"https://github.com/aloneguid/parquet-dotnet/releases/tag/{Globals.Version}";

    protected override async Task OnInitializedAsync()
    {
        GFile.OnFileLoaded += fileName =>
        {
            StateHasChanged();
        };
    }

    async Task ClearAsync(MouseEventArgs args)
    {
        GFile.Clear();
        StateHasChanged();
    }
}