@using Parquet.Rows;
@using Parquet.Schema;
@using System.Collections;

@if(Field != null)
{
    if(Field.SchemaType == SchemaType.Data)
    {
        if(Field is DataField df)
        {
            object? v = Row?[ValueIndex];

            if(df.IsArray)
            {
                <div class="d-flex flex-row">
                    @if(v is IEnumerable ie)
                    {
                        foreach(object? iv in ie)
                        {
                            <div class="border p-1 m-1">@iv</div>
                        }
                    }
                </div>
            }
            else
            {
                if(v == null)
                {
                    <i>null</i>
                }
                else
                {
                    @v
                }
            }
        }
    }
    else if(Field.SchemaType == SchemaType.Struct || Field.SchemaType == SchemaType.Map)
    {
        if(Row?[ValueIndex] is Row r1)
        {
            string jsonString = r1.ToString("j");
            <span class="pretty-json">@jsonString</span>
        }
    }
    else if(Field.SchemaType == SchemaType.List && Field is ListField lf)
    {
        object? value = Row?[ValueIndex];

        if(value is object[] lr)
        {
            <ul>
                @foreach(object lri in lr)
                {
                    <li>
                    @if(lri is Row row)
                    {
                            <span class="pretty-json">@(row.ToString("j"))</span>
                        }
                        else
                        {
                            var fakeRow = new Row(lri);
                            <RowValue Row=@fakeRow ValueIndex=0 Field=@lf.Item></RowValue>
                    }
                    </li>
                }
            </ul>
        }
        else
        {
            <span>unexpected type:</span><strong>@(value.GetType())</strong>
        }
    }
    else
    {
        <strong>todo1: @Field.SchemaType</strong>
    }
}

@code {
    [Parameter]
    public Row? Row { get; set; }

    [Parameter]
    public int ValueIndex { get; set; }

    [Parameter]
    public Field? Field { get; set; }
}
